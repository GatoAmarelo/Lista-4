// Anabel Marinho Soares 
// Lista de exercicios tipos estruturados
// Lista 4
// Questao 01


#include <stdio.h>
#include<locale.h>

// Crie um tipo estruturado para armazenar dados de um ingresso. Uma estrutura deste tipo possui os
// seguintes campos: preço, local e atração. 

// criando a struct 

typedef struct ingresso {
	      float preco;
	      char local[50];
	      char atracao[50];
} Ingresso;


// Escreva uma função que receba como parâmetro o endereço de uma estrutura do tipo Ingresso e 
// preencha seus campos com valores fornecidos pelo usuário via teclado

// criando a funcao que lera os elementos da struct

void preenche(Ingresso* i) {
	printf("Preço : \n");
	scanf("%f", &i->preco);
    printf("Local : \n");
	scanf("%s", i->local);
    printf("atração : \n");
	scanf("%s", i->atracao);
	
}

// Escreva uma função que receba como parâmetro o endereço de uma estrutura do tipo Ingresso e imprima
// os valores dos seus campos

// criando funcao que imprimira o resultado dos elementos lidos

void imprime(Ingresso* i) {
	printf("O preço é %.2f reais \nNo local %s \nCom atração %s \n", i->preco,i->local,i->atracao);
}

// Escreva uma função que receba, como parâmetros, o endereço de uma estrutura do tipo Ingresso e um
// novo valor de preço e atualize o preço do ingresso para o novo valor. 

// alterando o preco do ingresso do primeiro ingresso

void altera_preco(Ingresso* i){
	float valor;
	printf("Altere o preço do ingresso \n");
	scanf("%f", &valor);
	i->preco = valor;
	
	
	
}

// Escreva uma função que receba, como parâmetros, um vetor de ingressos e o tamanho do vetor e
// imprima os eventos de ingresso mais barato e mais caro.

// verificando maior e menor preco, isso depois de ter alterado o preco

void imprime_menor_maior_preco(int n, Ingresso* vet){
	int i;
	int menor=0, maior=0;
    for (i = 0; i < n; i++) {
        if (vet[i].preco > vet[maior].preco) {
            maior = i;
        }
        if (vet[i].preco < vet[menor].preco) {
            menor = i;
        }
    }
    
    // impimindo ingresso mais barato e mais caro
    printf("O ingresso com eventos mais caros é o com a atração %s", vet[maior].atracao);
    printf(" e o ingresso com eventos mais barato é o com a atração %s", vet[menor].atracao);
    
}

// Escreva uma função main para testar as funções anteriores.


int main(){
setlocale(LC_ALL, "portuguese");

int n;	
int i;
// lendo a quantiade de ingressos 

printf("Quantos ingressos deseja comprar ? \n");
scanf("%d", &n);

// chamando as funcoes

Ingresso vet[n];

 for (i = 0; i < n; i++) {
        preenche(&vet[i]);
    }
    for (i = 0; i < n; i++) {
        imprime(&vet[i]);
    }
    altera_preco(&vet[0]);

    imprime_menor_maior_preco(n, vet);	
	

    return 0; 
}

// lista 4
//Questao 2 

#include <stdio.h>
#include <locale.h>
#include<stdlib.h>
#define MAX 1
// criando a estrutura
typedef struct aluno{
	    char nome[80];
		char turma[10];
		int matricula; 
  	    float notas[3];
	    float media;
	     
	     
} Aluno;


// criando funcao que lera os dados do aluno

void matricula(int n,Aluno**alunos){
	 static int i;
      if(i<n){
      
      // alocando vetor de alunos
      
     *alunos = (Aluno*) malloc(n*sizeof(Aluno));
   
     for(i=0;i< n;i++){
	
	 printf("Nome do aluno : \n");
	 scanf("%s", alunos[i]->nome);
     printf("Turma do aluno: \n");
	 scanf("%s", alunos[i]->turma);
     printf("Matricula do aluno : \n");
	 scanf("%d", &alunos[i]->matricula);
     alunos[i]->notas[0]=0;
     alunos[i]->notas[1]=0;
     alunos[i]->notas[2]=0;
     alunos[i]->media=0;
     i++;
	 }
	  } else {
		  printf("Nao ha vagas");
	  }
	 
}

// criando funcao que ler as notas e faz a media

void lanca_notas(int n,Aluno** alunos){
	 int i;
    
     for(i=0;i<n;i++){
   	      if(alunos[i]!=NULL) {
   	      
     printf("Notas [%d]: \n", i);
     scanf("%f \n %f \n %f \n", &alunos[i]->notas[0],&alunos[i]->notas[1],&alunos[i]->notas[2]);
     alunos[i]->media=(alunos[i]->notas[0] + alunos[i]->notas[1] + alunos[i]->notas[2])/3;
           }
    }
}	
// imprimindo os resultados

void imprime_tudo(int n,Aluno** alunos){

	int i;
	 for(i=0;i< n;i++){
	 	if(alunos[i]!=NULL){
	printf("Nome %s \nTurma %s \nMatricula %d \n", alunos[i]->nome,alunos[i]->turma,alunos[i]->matricula);
    printf("Notas : %.1f | %.1f | %.1f", alunos[i]->notas[0],alunos[i]->notas[1],alunos[i]->notas[2]);
    printf("\nMedia: %.1f \n", alunos[i]->media);
}
	    }
   }
// criando funcao que imprime os dados de aluno de determinada classe

void imprime_turma(int n, Aluno** alunos,char turma){
	 
	 int i;
	 for(i=0;i<n;i++){
		 if(alunos[i]!=NULL && alunos[i]->turma==turma){
            printf("\n Matricula %d", alunos[i]->matricula );
            printf("\n Nome %s \n", alunos[i]->nome);
            printf("Turma %s \n", alunos[i]->turma);
        }
    }
	 
	
}

// criando funcao para alunos aprovados 

void imprime_turma_aprovados(int n, Aluno**alunos, char turma){
    int i;
    for(i=0;i<n;i++){
        if(alunos[i]!=NULL && alunos[i]->turma==turma){
           if(alunos[i]->media>=7){
                printf("\n Matricula %d", alunos[i]->matricula);
                printf("\nNome %s \n", alunos[i]->nome);
                printf("Media %.1f \n, aprovado !!", alunos[i]->media);
           }
        }
    }
}




int main(){

Aluno *aluno[MAX];

// chamando funcoes 

matricula(MAX, aluno);
lanca_notas(MAX, aluno);
imprime_tudo(MAX,aluno);
imprime_turma(MAX,aluno, 'a');
imprime_turma_aprovados(MAX,aluno, 'a');
    
    return 0;
}

// Lista 4
// Questao 3


#include <stdio.h>
#include <stdlib.h>
#include <math.h>
// criando struct para retangulo
typedef struct retangulo{
    float base;
    float al;
} Ret;

// criando struct para circulo 

typedef struct circulo{
    float raio;
} Circ;

// criando funcao que retorna o maior retangulo circunscrito

Ret * ret_circunscrito(Circ *c, float h){
    // alocando a struct retangulo
    Ret *r= malloc(sizeof(Ret));
    r->base = 2 * sqrt(pow(c->raio, 2) - pow(h, 2));
    r->al = h;
    // retornando o calculo
    return r;
}
// criando funcao do circulo

Circ * circ_interno(Ret *r){
    // alocando a struct circulo
    Circ *c = malloc(sizeof(Circ));
    c->raio = sqrt(pow(r->base, 2) + pow(r->al, 2)) / 2;
    // retornando calculo
    return c;
}


int main(void){
    
    Circ *c = malloc(sizeof(Circ));
    
    c->raio = 5;
    
    Ret *r = ret_circunscrito(c, 3);
    // imprimindo 
    printf("Base : %.0f \n", r->base); 
    printf("Altura : %.0f \n", r->al);
    // liberando vetores que foram alocados
    free(c);
    free(r);
    return 0;
}
